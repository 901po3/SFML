// Demo 3 - movedemo.cpp : Defines the entry point for the console application.
// std::move is used to indicate that an object t may be "moved from", i.e. allowing the efficient transfer of resources from t to another object. 
// In particular, std::move produces an xvalue expression that identifies its argument t.It is exactly equivalent to a static_cast to an rvalue reference type.

#include "stdafx.h"
//stdafx.h is a precompiled header file, generated by Microsoft Visual Studio IDE wizards, that describes both standard system and project specific include files that are used frequently but hardly ever change.

#include <iostream>
#include <utility>
#include <vector>
#include <string>
using namespace std;

int main()
{
	string str = "Hello";
	string y = "bye";

	//y is an lvalue because it persists beyond the expression that defines it.
	//The expression bye is an rvalue because it evaluates to a temporary value that does not persist beyond the expression that defines it.

	std::vector<std::string> v;

	// uses the push_back(const T&) overload, which means 
	// we'll incur the cost of copying str
	v.push_back(str);
	std::cout << "After copy, str is \"" << str << "\"\n";

	// uses the rvalue reference push_back(T&&) overload, 
	// which means no strings will be copied; instead, the contents
	// of str will be moved into the vector.  This is less
	// expensive, but also means str might now be empty.
	v.push_back(std::move(str));
	std::cout << "After move, str is \"" << str << "\"\n";

	std::cout << "The contents of the vector are \"" << v[0]
		<< "\", \"" << v[1] << "\"\n";

	cout << "Press any key to continue: ";
	getline(cin, y);
	return 0;
}

